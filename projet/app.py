import streamlit as st
import pandas as pd
import joblib
import os
import json
import numpy as np
import plotly.express as px
import tensorflow as tf
from datetime import datetime
from preprocessing import preprocess_data

# -------------------------------------------------------------
# Configuration initiale
# -------------------------------------------------------------
st.set_page_config(
    page_title="Survie Cancer Gastrique",
    page_icon="ü©∫",
    layout="wide"
)

# -------------------------------------------------------------
# Fonctions utilitaires
# -------------------------------------------------------------
def load_model(model_path):
    _, ext = os.path.splitext(model_path)
    if ext in ['.keras', '.h5']:
        return tf.keras.models.load_model(model_path, compile=False)
    else:
        return joblib.load(model_path)

def predict_survival(model, data):
    if hasattr(model, "predict_median"):
        return model.predict_median(data)
    elif hasattr(model, "predict"):
        pred = model.predict(data)
        return pred[0] if isinstance(pred, np.ndarray) else pred
    else:
        raise ValueError("Mod√®le non support√©")

def save_prediction(patient_data, predictions):
    record = {
        **patient_data,
        **predictions,
        'timestamp': datetime.now().isoformat()
    }
    df = pd.DataFrame([record])
    if not os.path.exists('data/patient_records.csv'):
        df.to_csv('data/patient_records.csv', index=False)
    else:
        df.to_csv('data/patient_records.csv', mode='a', header=False, index=False)

# -------------------------------------------------------------
# Chargement des configurations
# -------------------------------------------------------------
with open('config/features.json') as f:
    FEATURES = json.load(f)

MODELS = {
    'CoxPH': 'models/coxph.pkl',
    'RSF': 'models/rsf.pkl',
    'GBST': 'models/gbst.pkl',
    'DeepSurv': 'models/deepsurv.keras'
}

# -------------------------------------------------------------
# Interface utilisateur
# -------------------------------------------------------------
def main():
    # Initialisation de l'√©tat de session
    if 'predictions' not in st.session_state:
        st.session_state.predictions = None

    # Cr√©ation des onglets
    tabs = st.tabs(["üìù Formulaire Patient", "üìä R√©sultats", "üìà Dashboard", "‚ÑπÔ∏è Aide"])
    
    # Onglet 1: Formulaire Patient
    with tabs[0]:
        st.header("Informations du Patient")
        patient_data = {}
        
        cols = st.columns(3)
        for i, feature in enumerate(FEATURES):
            with cols[i % 3]:
                config = FEATURES[feature]
                if config['type'] == 'number':
                    patient_data[feature] = st.number_input(
                        config['label'],
                        min_value=config['min'],
                        max_value=config['max'],
                        value=config['default']
                    )
                elif config['type'] == 'select':
                    patient_data[feature] = st.selectbox(
                        config['label'],
                        options=config['options'],
                        index=config['options'].index(config['default'])
                    )

        if st.button("Pr√©dire la survie", type="primary"):
            try:
                # Pr√©traitement
                df = pd.DataFrame([patient_data])
                processed_data = preprocess_data(df)
                
                # Chargement des mod√®les
                models = {name: load_model(path) for name, path in MODELS.items()}
                
                # Pr√©dictions
                predictions = {}
                for name, model in models.items():
                    pred = predict_survival(model, processed_data)
                    predictions[name] = max(round(float(pred), 1), 0)
                
                st.session_state.predictions = predictions
                save_prediction(patient_data, predictions)
                
            except Exception as e:
                st.error(f"Erreur lors de la pr√©diction: {str(e)}")

    # Onglet 2: R√©sultats
    with tabs[1]:
        st.header("R√©sultats des Pr√©dictions")
        
        if st.session_state.predictions:
            cols = st.columns(len(MODELS))
            for (name, pred), col in zip(st.session_state.predictions.items(), cols):
                col.metric(
                    label=name,
                    value=f"{pred} mois",
                    help="Temps de survie m√©dian pr√©dit"
                )
            
            st.subheader("Interpr√©tation")
            st.progress(min(st.session_state.predictions['CoxPH']/36, 1.0))
            st.write("""
            **Guide d'interpr√©tation:**
            - <12 mois: Survie courte - Prise en charge palliative recommand√©e
            - 12-36 mois: Survie interm√©diaire - Surveillance rapproch√©e
            - >36 mois: Survie longue - Suivi standard
            """)
        else:
            st.info("Soumettre le formulaire patient pour voir les pr√©dictions")

    # Onglet 3: Dashboard
    with tabs[2]:
        st.header("Analyse des Donn√©es Historiques")
        
        if os.path.exists('data/patient_records.csv'):
            df = pd.read_csv('data/patient_records.csv')
            
            # Filtres
            age_range = st.slider("Filtrer par √¢ge", 
                min_value=int(df['AGE'].min()), 
                max_value=int(df['AGE'].max()),
                value=(30, 80))
            
            filtered_df = df[(df['AGE'] >= age_range[0]) & (df['AGE'] <= age_range[1])]
            
            # Visualisations
            col1, col2 = st.columns(2)
            with col1:
                fig = px.histogram(filtered_df, x='CoxPH', nbins=20, 
                                 title="Distribution des pr√©dictions CoxPH")
                st.plotly_chart(fig, use_container_width=True)
                
            with col2:
                fig = px.scatter(filtered_df, x='AGE', y='CoxPH', color='SEXE',
                               title="Relation √Çge/Survie par Sexe")
                st.plotly_chart(fig, use_container_width=True)
            
            st.subheader("Donn√©es Brutes")
            st.dataframe(filtered_df.sort_values('timestamp', ascending=False), 
                        height=300)
        else:
            st.warning("Aucune donn√©e historique disponible")

    # Onglet 4: Aide
    with tabs[3]:
        st.header("Guide d'Utilisation")
        
        st.markdown("""
        ### Documentation de l'Application
        
        **1. Formulaire Patient**
        - Renseigner toutes les informations cliniques disponibles
        - Les champs marqu√©s d'un * sont obligatoires
        - Cliquer sur 'Pr√©dire la survie' pour lancer l'analyse
        
        **2. R√©sultats**
        - Comparaison des pr√©dictions entre diff√©rents mod√®les
        - Interpr√©tation clinique des r√©sultats
        - Recommandations th√©rapeutiques bas√©es sur le consensus
        
        **3. Dashboard**
       - Analyse populationnelle des donn√©es historiques
        - Filtres interactifs pour l'exploration des donn√©es
        - Export des donn√©es au format CSV
        """)

if __name__ == "__main__":
    main()
