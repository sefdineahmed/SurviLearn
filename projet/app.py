import streamlit as st
import pandas as pd
import joblib
import json
import os
import numpy as np
import tensorflow as tf
from PIL import Image
import plotly.express as px
from preprocessing import preprocess_data

# -------------------------------------------------------------
# Configuration initiale
# -------------------------------------------------------------

# Chargement de la configuration depuis le JSON
with open('config/features.json') as f:
    features_config = json.load(f)

# -------------------------------------------------------------
# Fonctions utilitaires
# -------------------------------------------------------------

def load_model(model_path):
    """Charge un mod√®le avec gestion des types"""
    if model_path.endswith('.keras'):
        return tf.keras.models.load_model(model_path)
    else:
        return joblib.load(model_path)

def predict_survival(model, data, model_name):
    """Effectue la pr√©diction selon le mod√®le"""
    try:
        if model_name == 'COXPH':
            return model.predict_median(data)
        elif model_name == 'RSF':
            return model.predict(data)[0]
        elif model_name == 'DEEPSURV':
            return model.predict(data)[0][0]
        else:
            return model.predict(data)[0]
    except Exception as e:
        st.error(f"Erreur de pr√©diction: {e}")
        return None

# -------------------------------------------------------------
# Interface utilisateur
# -------------------------------------------------------------

def main():
    st.set_page_config(
        page_title="OncoSurv S√©n√©gal",
        page_icon="ü©∫",
        layout="wide"
    )

    # Sidebar avec param√®tres
    with st.sidebar:
        st.title("Configuration")
        selected_models = st.multiselect(
            "Mod√®les √† utiliser",
            ['COXPH', 'RSF', 'GBST', 'DEEPSURV'],
            default=['COXPH', 'RSF']
        )
    
    # Navigation principale
    tabs = ["üìù Formulaire", "üìä Dashboard", "‚öôÔ∏è Administration"]
    current_tab = st.sidebar.radio("Navigation", tabs)

    # Onglet Formulaire
    if current_tab == "üìù Formulaire":
        st.header("Formulaire Patient")
        
        # Saisie dynamique depuis features.json
        patient_data = {}
        cols = st.columns(3)
        for i, (feature, config) in enumerate(features_config.items()):
            with cols[i%3]:
                if config['type'] == 'number':
                    patient_data[feature] = st.number_input(
                        config['label'],
                        min_value=config['min'],
                        max_value=config['max'],
                        value=config['default']
                    )
                elif config['type'] == 'select':
                    patient_data[feature] = st.selectbox(
                        config['label'],
                        options=config['options']
                    )

        if st.button("Lancer la pr√©diction"):
            df = preprocess_data(pd.DataFrame([patient_data]))
            
            # Chargement des mod√®les
            models = {name: load_model(f'models/{name.lower()}.pkl') 
                     for name in selected_models}
            
            # Affichage des r√©sultats
            st.subheader("R√©sultats de pr√©diction")
            results = {}
            
            for name, model in models.items():
                prediction = predict_survival(model, df, name)
                results[name] = prediction
                st.metric(label=name, value=f"{prediction:.1f} mois")
            
            # Visualisation
            fig = px.bar(
                x=list(results.keys()),
                y=list(results.values()),
                labels={'x':'Mod√®le', 'y':'Mois de survie'},
                title="Comparaison des mod√®les"
            )
            st.plotly_chart(fig)

    # Onglet Dashboard
    elif current_tab == "üìä Dashboard":
        st.header("Analytique des donn√©es")
        
        # Chargement des donn√©es historiques
        try:
            hist_data = pd.read_csv('data/historical_data.csv')
            st.dataframe(hist_data.tail(10))
            
            # Visualisations
            col1, col2 = st.columns(2)
            with col1:
                fig = px.histogram(hist_data, x='Prediction', nbins=20)
                st.plotly_chart(fig)
            
            with col2:
                fig = px.box(hist_data, y='AGE', x='SEXE')
                st.plotly_chart(fig)
                
        except FileNotFoundError:
            st.warning("Aucune donn√©e historique trouv√©e")

    # Onglet Administration
    elif current_tab == "‚öôÔ∏è Administration":
        st.header("Gestion des mod√®les")
        
        # T√©l√©versement de nouveaux mod√®les
        uploaded_model = st.file_uploader("Nouveau mod√®le", type=['pkl', 'keras'])
        if uploaded_model:
            # Sauvegarde du mod√®le
            with open(f'models/{uploaded_model.name}', 'wb') as f:
                f.write(uploaded_model.getbuffer())
            st.success("Mod√®le mis √† jour avec succ√®s!")
        
        # Gestion des variables
        if st.button("Recharger la configuration"):
            with open('config/features.json') as f:
                features_config = json.load(f)
            st.experimental_rerun()

if __name__ == "__main__":
    main()
